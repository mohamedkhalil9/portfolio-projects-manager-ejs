<!-- Background elements -->
<div class="absolute inset-0 overflow-hidden z-0">
  <div
    class="absolute top-1/4 left-1/4 w-64 h-64 bg-indigo-900 rounded-full mix-blend-soft-light filter blur-3xl opacity-30 animate-float"
  ></div>
  <div
    class="absolute top-1/3 right-1/4 w-72 h-72 bg-purple-900 rounded-full mix-blend-soft-light filter blur-3xl opacity-20 animate-float animation-delay-2000"
  ></div>
  <div
    class="absolute bottom-1/4 left-1/3 w-56 h-56 bg-blue-900 rounded-full mix-blend-soft-light filter blur-3xl opacity-25 animate-float animation-delay-3000"
  ></div>
</div>

<!-- Form container -->
<div
  class="form-container rounded-2xl w-full max-w-md z-10 p-8 animate-fade-in"
>
  <div class="text-center mb-8 animate-slide-up">
    <div
      class="w-20 h-20 rounded-full bg-gradient-to-br from-indigo-900 to-purple-900 flex items-center justify-center mx-auto mb-6 glow"
    >
      <i class="fas fa-lock text-3xl text-white opacity-90"></i>
    </div>
    <h1 class="text-3xl font-light text-white mb-2">Reset Password</h1>
    <p class="text-gray-400 font-light">Create a new secure password</p>
  </div>

  <% if (typeof error !=='undefined' && error) { %>
  <div
    class="bg-red-900/20 border border-red-800 text-red-400 p-4 rounded-xl mb-6 animate-slide-up"
  >
    <i class="fas fa-exclamation-triangle mr-2"></i>
    <%= error %>
  </div>
  <% } %>

  <form
    action="/api/v1/auth/reset-password"
    method="POST"
    class="space-y-6"
    id="resetForm"
  >
    <!-- New Password -->
    <div class="animate-slide-up animation-delay-150">
      <label class="block text-gray-400 text-sm font-light mb-2"
        >New Password</label
      >
      <div class="relative">
        <i
          class="fas fa-lock absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500"
        ></i>
        <input
          type="password"
          name="password"
          id="password"
          class="input-field w-full pl-12 pr-12 py-3 rounded-xl text-white border border-gray-800 focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
          placeholder="••••••••"
          required
          minlength="8"
        />
        <i
          class="fas fa-eye-slash absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer hover:text-gray-300"
          id="togglePassword"
        ></i>
      </div>

      <!-- Password strength indicator -->
      <div class="mt-2">
        <div class="flex items-center space-x-2 mb-1">
          <div class="flex-1 h-2 bg-gray-800 rounded-full overflow-hidden">
            <div
              class="h-full transition-all duration-300 rounded-full"
              id="strengthBar"
            ></div>
          </div>
          <span class="text-xs text-gray-500" id="strengthText">Weak</span>
        </div>
        <div class="text-xs text-gray-500">
          <div class="grid grid-cols-2 gap-1">
            <div class="requirement" id="length">✗ At least 8 characters</div>
            <div class="requirement" id="uppercase">✗ One uppercase letter</div>
            <div class="requirement" id="lowercase">✗ One lowercase letter</div>
            <div class="requirement" id="number">✗ One number</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Confirm Password -->
    <div class="animate-slide-up animation-delay-300">
      <label class="block text-gray-400 text-sm font-light mb-2"
        >Confirm Password</label
      >
      <div class="relative">
        <i
          class="fas fa-lock absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500"
        ></i>
        <input
          type="password"
          name="confirmPassword"
          id="confirmPassword"
          class="input-field w-full pl-12 pr-12 py-3 rounded-xl text-white border border-gray-800 focus:outline-none focus:ring-1 focus:ring-indigo-500/50"
          placeholder="••••••••"
          required
        />
        <i
          class="fas fa-eye-slash absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500 cursor-pointer hover:text-gray-300"
          id="toggleConfirmPassword"
        ></i>
      </div>
      <div class="mt-1 text-xs" id="matchStatus"></div>
    </div>

    <button
      type="submit"
      id="submitBtn"
      class="login-btn w-full py-3 rounded-xl text-white font-medium text-lg animate-slide-up animation-delay-450 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      <i class="fas fa-save mr-2"></i>
      Reset Password
    </button>

    <div class="text-center animate-slide-up animation-delay-600">
      <a
        href="/api/v1/auth/login"
        class="text-gray-500 hover:text-gray-300 transition text-sm"
      >
        <i class="fas fa-arrow-left mr-1"></i>
        Back to login
      </a>
    </div>
  </form>
</div>

<script>
  const passwordInput = document.getElementById("password");
  const confirmPasswordInput = document.getElementById("confirmPassword");
  const togglePassword = document.getElementById("togglePassword");
  const toggleConfirmPassword = document.getElementById(
    "toggleConfirmPassword",
  );
  const strengthBar = document.getElementById("strengthBar");
  const strengthText = document.getElementById("strengthText");
  const matchStatus = document.getElementById("matchStatus");
  const submitBtn = document.getElementById("submitBtn");

  // Password visibility toggles
  togglePassword.addEventListener("click", () => {
    const type =
      passwordInput.getAttribute("type") === "password" ? "text" : "password";
    passwordInput.setAttribute("type", type);
    togglePassword.classList.toggle("fa-eye");
    togglePassword.classList.toggle("fa-eye-slash");
  });

  toggleConfirmPassword.addEventListener("click", () => {
    const type =
      confirmPasswordInput.getAttribute("type") === "password"
        ? "text"
        : "password";
    confirmPasswordInput.setAttribute("type", type);
    toggleConfirmPassword.classList.toggle("fa-eye");
    toggleConfirmPassword.classList.toggle("fa-eye-slash");
  });

  // Password strength checker
  function checkPasswordStrength(password) {
    const requirements = {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /\d/.test(password),
    };

    // Update requirement indicators
    Object.keys(requirements).forEach((req) => {
      const element = document.getElementById(req);
      if (requirements[req]) {
        element.textContent = element.textContent.replace("✗", "✓");
        element.classList.add("text-green-400");
        element.classList.remove("text-gray-500");
      } else {
        element.textContent = element.textContent.replace("✓", "✗");
        element.classList.add("text-gray-500");
        element.classList.remove("text-green-400");
      }
    });

    // Calculate strength
    const score = Object.values(requirements).filter(Boolean).length;
    let strength, color, width;

    switch (score) {
      case 0:
      case 1:
        strength = "Very Weak";
        color = "bg-red-500";
        width = "20%";
        break;
      case 2:
        strength = "Weak";
        color = "bg-orange-500";
        width = "40%";
        break;
      case 3:
        strength = "Good";
        color = "bg-yellow-500";
        width = "60%";
        break;
      case 4:
        strength = "Strong";
        color = "bg-green-500";
        width = "100%";
        break;
    }

    strengthBar.className = `h-full transition-all duration-300 rounded-full ${color}`;
    strengthBar.style.width = width;
    strengthText.textContent = strength;

    return score >= 3;
  }

  // Password match checker
  function checkPasswordMatch() {
    const password = passwordInput.value;
    const confirmPassword = confirmPasswordInput.value;

    if (confirmPassword === "") {
      matchStatus.textContent = "";
      return false;
    }

    if (password === confirmPassword) {
      matchStatus.textContent = "✓ Passwords match";
      matchStatus.className = "mt-1 text-xs text-green-400";
      return true;
    } else {
      matchStatus.textContent = "✗ Passwords do not match";
      matchStatus.className = "mt-1 text-xs text-red-400";
      return false;
    }
  }

  // Validate form
  function validateForm() {
    const isStrongPassword = checkPasswordStrength(passwordInput.value);
    const passwordsMatch = checkPasswordMatch();

    submitBtn.disabled = !(isStrongPassword && passwordsMatch);
  }

  // Event listeners
  passwordInput.addEventListener("input", validateForm);
  confirmPasswordInput.addEventListener("input", validateForm);

  // Form submission
  document.getElementById("resetForm").addEventListener("submit", (e) => {
    if (submitBtn.disabled) {
      e.preventDefault();
    }
  });

  // Initial validation
  validateForm();
</script>
